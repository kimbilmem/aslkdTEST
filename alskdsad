local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Stellar Hub Blade Ball",
    SubTitle = "by sarrque",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "align-end-horizontal" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "wrench" })
}


local customNamespace = {
    Sayting = {
    autoSlap = false,
  },
 }

 local Players = game:GetService("Players")
 local LocalPlayer = Players.LocalPlayer

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "Discord Server",
        SubContent = "Join our server to be notified of updates https://discord.gg/8STRm9Nfwj", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })

    local functions = {}

    function functions:autoSlap()
            if customNamespace.Sayting.autoSlap then
                local Debug = false -- Set this to true if you want my debug output.
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Players = game:GetService("Players")
                
                local Player = Players.LocalPlayer or Players.PlayerAdded:Wait()
                local Remotes = ReplicatedStorage:WaitForChild("Remotes", 9e9) -- A second argument in waitforchild what could it mean?
                local Balls = workspace:WaitForChild("Balls", 9e9)
                
                -- Functions
                
                local function print(...) -- Debug print.
                    if Debug then
                        warn(...)
                    end
                end
                
                local function VerifyBall(Ball) -- Returns nil if the ball isn't a valid projectile; true if it's the right ball.
                    if typeof(Ball) == "Instance" and Ball:IsA("BasePart") and Ball:IsDescendantOf(Balls) and Ball:GetAttribute("realBall") == true then
                        return true
                    end
                end
                
                local function IsTarget() -- Returns true if we are the current target.
                    return (Player.Character and Player.Character:FindFirstChild("Highlight"))
                end
                
                local function Parry() -- Parries.
                    Remotes:WaitForChild("ParryButtonPress"):Fire()
                end
                
                -- The actual code
                
                Balls.ChildAdded:Connect(function(Ball)
                    if not VerifyBall(Ball) then
                        return
                    end
                    
                    print(`Ball Spawned: {Ball}`)
                    
                    local OldPosition = Ball.Position
                    local OldTick = tick()
                    
                    Ball:GetPropertyChangedSignal("Position"):Connect(function()
                        if IsTarget() then -- No need to do the math if we're not being attacked.
                            local Distance = (Ball.Position - workspace.CurrentCamera.Focus.Position).Magnitude
                            local Velocity = (OldPosition - Ball.Position).Magnitude -- Fix for .Velocity not working. Yes I got the lowest possible grade in accuplacer math.
                            
                            print(`Distance: {Distance}\nVelocity: {Velocity}\nTime: {Distance / Velocity}`)
                        
                            if (Distance / Velocity) <= 10 then -- Sorry for the magic number. This just works. No, you don't get a slider for this because it's 2am.
                                Parry()
                            end
                        end
                        
                        if (tick() - OldTick >= 1/60) then -- Don't want it to update too quickly because my velocity implementation is aids. Yes, I tried Ball.Velocity. No, it didn't work.
                            OldTick = tick()
                            OldPosition = Ball.Position
                        end
                    end)
                end)                                     
            end
        end


    Tabs.Main:AddParagraph({
        Title = "StellarHub",
        Content = "Hello Thanks for using my script! - \nMake sure to join us at discord.gg/8STRm9Nfwj"
    })



    local Toggle = Tabs.Main:AddToggle("MyToggle", {
        Title = "Auto Parry",
        Default = false,
        Callback = function(Value)
            customNamespace.Sayting.autoSlap = Value
            if Value then
                functions.autoSlap()
            end
        end
    })   
    
    Options.MyToggle:SetValue(false)


    Tabs.Main:AddParagraph({
        Title = "Player Options",
        Content = ""
    })

    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "Walk Speed",
        Description = "Change WalkSpeed",
        Default = 37,
        Min = 37,
        Max = 80,
        Rounding = 1,
        Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
            print("Slider was changed:", Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(3)


    local SendMessage = function(url, message)
        local http = game:GetService("HttpService")
        local headers = {
            ["Content-Type"] = "application/json"
        }
        local data = {
            ["content"] = message
        }
        local body = http:JSONEncode(data)
        local response = request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body
        })
        print("Sent")
    end
    
    local SendMessageEMBED = function(url, embed)
        local http = game:GetService("HttpService")
        local headers = {
            ["Content-Type"] = "application/json"
        }
        local data = {
            ["embeds"] = {
                {
                    ["title"] = embed.title,
                    ["description"] = embed.description,
                    ["color"] = embed.color,
                    ["fields"] = embed.fields,
                    ["footer"] = {
                        ["text"] = embed.footer.text
                    }
                }
            }
        }
        local body = http:JSONEncode(data)
        local response = request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body
        })
        print("Sent")
    end

    local url = userEnteredURL
    
    -- Create a function to send the webhook every 5 seconds
    local function SendWebhook()
        -- Get the player's stats
        local moneyValue = game:GetService("Players").LocalPlayer.PlayerGui.UI.Money.Frame.TextBox.Text
        local killsValue = game:GetService("Players").LocalPlayer.leaderstats.Kills.Value
        local winsValue = game:GetService("Players").LocalPlayer.leaderstats.Wins.Value
    
        -- Create the embed
        local embed = {
            ["title"] = "__**STELLAR HUB Player Stats**__",
            ["color"] = 65280,
            ["fields"] = {
                {
                    ["name"] = "<:IL_coin3:1157084525621415956> Money",
                    ["value"] = moneyValue,
                    ["inline"] = false
                },
                {
                    ["name"] = "<:action_kil:1157084523675267233> Kills",
                    ["value"] = killsValue,
                    ["inline"] = false
                },
                {
                    ["name"] = "<:MTX_premium:1157084528477737032> Wins",
                    ["value"] = winsValue,
                    ["inline"] = false
                }
            },
            ["footer"] = {
                ["text"] = "StellarHub " .. os.date("%Y-%m-%d %H:%M:%S")
            }
        }
    
        -- Send the webhook
        SendMessageEMBED(url, embed)
    
        -- Wait 5 seconds and then send the webhook again
        wait(300)
        SendWebhook()
    end
    
    -- Start the webhook loop
    SendWebhook()



    Tabs.Misc:AddParagraph({
        Title = "Made by sarrque",
        Content = "discord.gg/8STRm9Nfwj"
    })
    

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("StellarHub")
SaveManager:SetFolder("StellarHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "StellarHub",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
end
